#!/bin/bash
set -e

echo "============================================"
echo "RETRIEVER ROLLBACK SCRIPT"
echo "============================================"

# Usage
if [ -z "$1" ]; then
  echo "Usage: bash scripts/rollback_retriever.sh <version>"
  echo ""
  echo "Examples:"
  echo "  bash scripts/rollback_retriever.sh v-1     # Rollback to previous version"
  echo "  bash scripts/rollback_retriever.sh v0      # Restore v0 (if rolled back)"
  echo ""
  echo "Available versions:"
  ls -1 artifacts/releases/ 2>/dev/null | grep -v "^retriever_v0$" || echo "  (none)"
  exit 1
fi

VERSION=$1
RELEASE_DIR="artifacts/releases/$VERSION"

# Validate version exists
if [ ! -d "$RELEASE_DIR" ]; then
  echo "❌ ERROR: Version not found: $RELEASE_DIR"
  echo ""
  echo "Available versions:"
  ls -1 artifacts/releases/ 2>/dev/null || echo "  (none)"
  exit 1
fi

echo "Target version: $VERSION"
echo "Release directory: $RELEASE_DIR"
echo ""

# Confirm rollback
read -p "⚠️  Are you sure you want to rollback to $VERSION? (yes/no): " confirm
if [ "$confirm" != "yes" ]; then
  echo "Rollback cancelled."
  exit 0
fi

echo ""
echo "============================================"
echo "STEP 1: Backup Current State"
echo "============================================"

# Backup current serving index
BACKUP_DIR="artifacts/releases/backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

if [ -f "artifacts/faiss/p_ivf_serving.faiss" ]; then
  cp artifacts/faiss/p_ivf_serving.faiss "$BACKUP_DIR/"
  echo "✅ Backed up current serving index"
fi

if [ -f "artifacts/faiss/p_flat_ip_serving.faiss" ]; then
  cp artifacts/faiss/p_flat_ip_serving.faiss "$BACKUP_DIR/"
  echo "✅ Backed up current truth index"
fi

# Backup current config
if [ -f "config/retriever.env" ]; then
  cp config/retriever.env "$BACKUP_DIR/"
  echo "✅ Backed up current config"
fi

echo ""
echo "Backup location: $BACKUP_DIR"

echo ""
echo "============================================"
echo "STEP 2: Restore Previous Version"
echo "============================================"

# Copy indexes from release
if [ -f "$RELEASE_DIR/p_ivf.faiss" ]; then
  cp "$RELEASE_DIR/p_ivf.faiss" artifacts/faiss/p_ivf_serving.faiss
  echo "✅ Restored IVF serving index from $VERSION"
fi

if [ -f "$RELEASE_DIR/p_flat_ip.faiss" ]; then
  cp "$RELEASE_DIR/p_flat_ip.faiss" artifacts/faiss/p_flat_ip_serving.faiss
  echo "✅ Restored FLAT truth index from $VERSION"
fi

# Restore config (if exists)
if [ -f "$RELEASE_DIR/config.env" ]; then
  cp "$RELEASE_DIR/config.env" config/retriever.env
  echo "✅ Restored config from $VERSION"
fi

echo ""
echo "============================================"
echo "STEP 3: Update Feature Flags"
echo "============================================"

# Read version metadata
if [ -f "$RELEASE_DIR/VERSION" ]; then
  echo "Version metadata:"
  cat "$RELEASE_DIR/VERSION"
  echo ""
fi

# Set feature flags based on version
case "$VERSION" in
  v-1)
    export RETRIEVER_IMPL=gru_v0
    export RERANKER=off
    echo "✅ Set flags: RETRIEVER_IMPL=gru_v0, RERANKER=off"
    ;;
  v0|retriever_v0)
    export RETRIEVER_IMPL=amn_v0
    export RERANKER=on
    echo "✅ Set flags: RETRIEVER_IMPL=amn_v0, RERANKER=on"
    ;;
  *)
    echo "⚠️  Unknown version: $VERSION (manual config required)"
    ;;
esac

# Write to env file for persistence
cat > config/retriever.env << EOF
# Generated by rollback_retriever.sh at $(date)
RETRIEVER_IMPL=${RETRIEVER_IMPL:-unknown}
RERANKER=${RERANKER:-off}
VERSION=$VERSION
EOF

echo "✅ Saved config to config/retriever.env"

echo ""
echo "============================================"
echo "STEP 4: Restart Services"
echo "============================================"

# Option 1: Kubernetes (if available)
if command -v kubectl &> /dev/null; then
  echo "Restarting Kubernetes deployment..."
  kubectl rollout restart deployment/retriever-service || echo "⚠️  kubectl restart failed (not critical)"
fi

# Option 2: Local service restart (development)
if pgrep -f "uvicorn.*retriever" > /dev/null; then
  echo "Restarting local retriever service..."
  pkill -f "uvicorn.*retriever"
  sleep 2
  # Note: You'll need to manually restart the service
  echo "⚠️  Local service stopped - manual restart required"
fi

echo ""
echo "============================================"
echo "STEP 5: Validation"
echo "============================================"

# Check health endpoint (if available)
if command -v curl &> /dev/null; then
  echo "Checking health endpoint..."
  curl -s http://localhost:8080/health | jq '.' || echo "⚠️  Health check unavailable"
fi

# Validate index files
echo ""
echo "Validating restored indexes..."
if [ -f "artifacts/faiss/p_ivf_serving.faiss" ]; then
  python3 << PYCODE
import faiss
try:
    index = faiss.read_index("artifacts/faiss/p_ivf_serving.faiss")
    print(f"✅ IVF index valid: {index.ntotal} vectors, {index.nlist} clusters")
except Exception as e:
    print(f"❌ IVF index invalid: {e}")
PYCODE
else
  echo "⚠️  IVF index not found"
fi

echo ""
echo "============================================"
echo "ROLLBACK COMPLETE"
echo "============================================"
echo "Version: $VERSION"
echo "Backup: $BACKUP_DIR"
echo ""
echo "Next steps:"
echo "  1. Verify metrics dashboard (P95 latency, error rate)"
echo "  2. Run smoke test: python tools/ivf_vs_flat_check.py"
echo "  3. Monitor for 30 minutes before declaring success"
echo "  4. Update rollback log: docs/PROD/rollback_history.md"
echo ""
echo "To undo this rollback:"
echo "  bash scripts/rollback_retriever.sh retriever_v0"
