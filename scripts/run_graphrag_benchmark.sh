#!/usr/bin/env bash
# Run GraphRAG vs vecRAG benchmark comparison
# Tests pure vector retrieval vs graph-augmented retrieval

set -e

echo "=== GraphRAG vs vecRAG Benchmark ==="
echo ""

# Verify data synchronization first
./scripts/verify_data_sync.sh || { echo "❌ Sync verification failed"; exit 1; }

# Optional: Check Neo4j (warn-only)
if command -v cypher-shell >/dev/null 2>&1; then
  if cypher-shell -u neo4j -p password "RETURN 1" &>/dev/null; then
    CONCEPT_COUNT=$(cypher-shell -u neo4j -p password "MATCH (c:Concept) RETURN count(c) as count" --format plain 2>/dev/null | tail -1 || echo "0")
    EDGE_COUNT=$(cypher-shell -u neo4j -p password "MATCH ()-[r:RELATES_TO]->() RETURN count(r) as count" --format plain 2>/dev/null | tail -1 || echo "0")
    echo "✓ Neo4j detected: $CONCEPT_COUNT concepts, $EDGE_COUNT edges"
  else
    echo "⚠️  Neo4j not responding; proceeding since graphrag_runner uses file-based KG (artifacts/kg)"
  fi
else
  echo "⚠️  cypher-shell not found; skipping Neo4j checks"
fi

# Resolve NPZ/index from configs/lightrag.yml (best-effort)
CFG_NPZ=$(python3 -c "import yaml,sys; d=yaml.safe_load(open('configs/lightrag.yml')); print((d or {}).get('vector_store',{}).get('meta_npz',''))" 2>/dev/null || echo "")
CFG_IDX=$(python3 -c "import yaml,sys; d=yaml.safe_load(open('configs/lightrag.yml')); print((d or {}).get('vector_store',{}).get('index_path',''))" 2>/dev/null || echo "")
if [ -z "$FAISS_NPZ_PATH" ] && [ -n "$CFG_NPZ" ] && [ -f "$CFG_NPZ" ]; then export FAISS_NPZ_PATH="$CFG_NPZ"; fi
if [ -n "$FAISS_NPZ_PATH" ]; then echo "✓ Using NPZ: $FAISS_NPZ_PATH"; fi

# Ensure Python deps are available (neo4j optional)
if ! ./.venv/bin/python -c "import yaml" 2>/dev/null; then
  echo "Installing PyYAML in venv..."
  ./.venv/bin/pip install PyYAML >/dev/null
fi

TIMESTAMP=$(date +%s)

# 1) Baseline vec/bm25 via bench.py
BASE_OUT="RAG/results/vecrag_benchmark_${TIMESTAMP}.jsonl"
echo "\nRunning baseline (vec,bm25) via RAG/bench.py..."
PYTHONPATH=. ./.venv/bin/python RAG/bench.py \
  --dataset self \
  --n 500 \
  --topk 10 \
  --backends vec,bm25 \
  --out "$BASE_OUT"

# 2) GraphRAG via LightRAG runner (file-based KG)
GR_QUERY_FILE=${GR_QUERY_FILE:-RAG/queries/graphrag_smoke.txt}
GR_OUT="RAG/results/graphrag_smoke_${TIMESTAMP}.jsonl"
echo "\nRunning GraphRAG via graphrag_runner.py..."
./.venv/bin/python -m src.adapters.lightrag.graphrag_runner \
  --config configs/lightrag.yml \
  --query-file "$GR_QUERY_FILE" \
  --out "$GR_OUT"

echo ""
echo "✅ Benchmark complete!"
echo ""
echo "Baseline results:   $BASE_OUT"
echo "GraphRAG results:   $GR_OUT"
echo ""
echo "Compare summaries under RAG/results/ if generated by bench."
