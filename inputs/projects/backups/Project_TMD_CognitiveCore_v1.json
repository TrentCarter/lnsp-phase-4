{
  "project": {
    "name": "TMD_CognitiveCore_v1_CrawlPhase",
    "version": "1.0",
    "description": "CLEAN IMPLEMENTATION: TMDMamba for Task/Modifier/Data reasoning. Properly architected with Instruction Fusion → Mamba Core → Response Deconstruction pipeline.",
    "timestamp": "2025-08-29T12:00:00",
    "author": "AI Assistant + User",
    "tags": ["TMD", "CognitiveCore", "TMDMamba", "CrawlPhase", "TripletReasoning"]
  },
  "training": {
    "patience": 10,
    "epochs": 50,
    "batch_size": 4,
    "learning_rate": 5e-5,
    "optimizer": "AdamW",
    "scheduler": "CosineAnnealingLR",
    "device_priority": ["mps", "cuda", "cpu"],
    "log_every_n_steps": 5
  },
  "data": {
    "path": "data/crawl_phase/physics_tmd.json",
    "validation_split": 0.2,
    "comment": "TMD triplet data with separate Task/Modifier/Data encoding"
  },
  "architecture": {
    "model_type": "TMDMamba",
    "embedding_dim": 768,

    "instruction_fusion_module": {
      "type": "CrossAttention",
      "embed_dim": 768,
      "num_heads": 8,
      "dropout": 0.1,
      "comment": "Fuses (V_Task, V_Modifier, V_Data) → V_Instruction via cross-attention"
    },

    "mamba_moe_processor": {
      "d_model": 768,
      "n_layers": 4,
      "d_state": 16,
      "expand": 2,
      "num_experts": 4,
      "top_k_experts": 2,
      "comment": "Core reasoning engine processing V_Instruction sequences"
    },

    "response_deconstruction_module": {
      "type": "MultiHeadedMLP",
      "input_dim": 768,
      "heads": {
        "task": {
          "hidden_dims": [1024],
          "output_dim": 768,
          "activation": "GELU",
          "dropout": 0.1
        },
        "modifier": {
          "hidden_dims": [1024],
          "output_dim": 768,
          "activation": "GELU",
          "dropout": 0.1
        },
        "data": {
          "hidden_dims": [2048, 1024],
          "output_dim": 768,
          "activation": "GELU",
          "dropout": 0.1
        }
      },
      "comment": "Deconstructs V_Thought → (V_Task_Resp, V_Modifier_Resp, V_Data_Resp)"
    }
  },
  "loss_config": {
    "type": "TMD_MultiTaskCosineEmbeddingLoss",
    "weights": {
      "task_loss": 0.25,
      "modifier_loss": 0.25,
      "data_loss": 0.50
    },
    "reduction": "mean",
    "comment": "Multi-task cosine embedding loss with component-specific weights"
  }
}